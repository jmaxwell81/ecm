<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_opt_ecm.ECMIntegrations</api_name>
        <client_callable>false</client_callable>
        <description>Class to manage integrations for the ECM application</description>
        <name>ECMIntegrations</name>
        <script>var ECMIntegrations = Class.create();&#13;
ECMIntegrations.prototype = {&#13;
	/** V E R A C I T Y ~ www.meetveracity.com ~ **&#13;
 	* Author: Todd Fudala ~ tfudala@meetveracity.com&#13;
	&#13;
 	* Description: Class to manage integrations for the ECM application&#13;
	&#13;
 	*/&#13;
	&#13;
	// CONSTANTS&#13;
	&#13;
	HTTPSTATUS_SUCCESS : "200",	// Indicates a successful HTTP post of a SOAP Message&#13;
	// ORS Codes&#13;
	INSERT : "N", // (N)ew&#13;
	UPDATE : "O", // (O)wner&#13;
	OPEN : "O", // (O)pen&#13;
	CLOSED : "C", // (C)losed&#13;
	PHONE : "P", // (P)hone&#13;
	MAIL : "M", // (M)ail&#13;
	// Standard Logging Control&#13;
	LOGSOURCE : "ECMIntegrations.", // Log Source&#13;
	LOGHEADER : "{0}{1} &gt;[{2}]:\r\n{3}", // Standard prefix&#13;
		LOG_INFO : "INFO",&#13;
		LOG_ERROR : "ERROR",&#13;
		LOG_DEBUG : "DEBUG",&#13;
		LOG_EXAMPLE : "gs.error(this.LOGHEADER , this.LOGSOURCE , functName, this.LOG_ERROR, message);",&#13;
		&#13;
		initialize: function() {&#13;
			&#13;
		},&#13;
		&#13;
		/** V E R A C I T Y ~ www.meetveracity.com ~ **&#13;
 		* Author: Todd Fudala ~ tfudala@meetveracity.com&#13;
		&#13;
 		* Description: Outbound SOAP API call to ORS&#13;
		&#13;
 		* Parameters:&#13;
 		* glide_record: the current record&#13;
 		* insert_or_update_constant: this.INSERT or this.UPDATE, this controls whether we are opening an issue or closing it&#13;
		&#13;
 		* Returns: True if the call is successful, False if unsucessful&#13;
 		*/&#13;
		&#13;
		callORS : function(glide_record, insert_or_update_constant) {&#13;
			var functName = "callORS()";&#13;
			&#13;
			var gr = new GlideRecord();&#13;
			gr = glide_record;&#13;
			&#13;
			// Ternaries&#13;
			// If this is an INSERT set the correct code&#13;
			var insert_or_update = (insert_or_update_constant==this.INSERT) ? this.INSERT : this.UPDATE;&#13;
			&#13;
			// If this is an INSERT then we are opening the issue in ORS (Case==WIP) otherwise we are closing it (Case==Resolved)&#13;
			var open_or_closed = (insert_or_update_constant==this.INSERT) ? this.OPEN : this.CLOSED;&#13;
			&#13;
			// Find the group number, it could be on contact or member&#13;
			var group_number = (gr.contact_is_member) ? gr.contact_group_number : gr.member_group_number;&#13;
			&#13;
			// If the transaction source is Verbal then (P)hone else (M)ail&#13;
			var transaction_source = (gr.transaction_source == 'verbal') ? this.PHONE : this.MAIL;&#13;
			&#13;
			&#13;
			try {&#13;
				var s = new sn_ws.SOAPMessageV2('x_opt_ecm.CreateOrUpdateIssueV13', 'invokeService');&#13;
				&#13;
				// header values&#13;
				s.setStringParameterNoEscape('requestHeader.applicationInstanceName', 'ECM');&#13;
				s.setStringParameterNoEscape('requestHeader.applicationName', 'ECM');&#13;
				s.setStringParameterNoEscape('requestHeader.logLevel', 'DEBUG');&#13;
				s.setStringParameterNoEscape('orsSystemParameter.logonOffice', '888');&#13;
				s.setStringParameterNoEscape('orsSystemParameter.logonId', 'ECM');&#13;
				// values for the people on the case&#13;
				s.setStringParameterNoEscape('member.memberNumber', group_number);&#13;
				s.setStringParameterNoEscape('memberName.firstName', gr.member_first_name);&#13;
				s.setStringParameterNoEscape('memberName.lastName', gr.member_last_name);&#13;
				s.setStringParameterNoEscape('dependentName.firstName', gr.patient_first_name);&#13;
				s.setStringParameterNoEscape('dependentName.lastName', gr.patient_last_name);&#13;
				s.setStringParameterNoEscape('callerName.firstName', gr.contact_first_name);&#13;
				s.setStringParameterNoEscape('callerName.lastName', gr.contact_last_name);&#13;
				// values for the reported case&#13;
				s.setStringParameterNoEscape('issue.status', open_or_closed);&#13;
				s.setStringParameterNoEscape('issue.reasonCategory', 'GENERAL');&#13;
				s.setStringParameterNoEscape('issue.reasonCode', 'EXECUTIVE COMPLAINT');&#13;
				s.setStringParameterNoEscape('issue.reasonType', ''); // Leave blank per Manish Arora&#13;
				s.setStringParameterNoEscape('issue.callHistoryFlag', 'N'); // Default to N per Manish Arora&#13;
				s.setStringParameterNoEscape('issue.caseNumber', gr.number); // The case number&#13;
				s.setStringParameterNoEscape('issue.createdByApplicationIndicator', 'Q'); // Q==ECM application to ORS&#13;
				s.setStringParameterNoEscape('issue.directionCode', 'I'); // (I)ncoming&#13;
				s.setStringParameterNoEscape('issue.updateType', insert_or_update);&#13;
				s.setStringParameterNoEscape('issue.contactMethodCode', transaction_source);&#13;
				s.setStringParameterNoEscape('issue.priority', 'N'); // (N)ormal&#13;
				//todo: map to contact relationship ?&#13;
				s.setStringParameterNoEscape('issue.originatorTypeCode', 'EM'); // MEMBER&#13;
				&#13;
				// 71 byte limit per &lt;comments/&gt; tag - oh mainframes.&#13;
				var notes = chunkStringToArray(gr.intake_comments.getJournalEntry(-1), 71);&#13;
				notes.forEach(function (elem) {&#13;
					s.setStringParameterNoEscape('issue.comments', '&lt;![CDATA[' + elem + ']]&gt;');&#13;
				});&#13;
				&#13;
				var response = s.execute();&#13;
				var responseBody = response.getBody();&#13;
				var status = response.getStatusCode();&#13;
				&#13;
				&#13;
				// Validate the SOAP call was successful and log results&#13;
				if(this.orsPostAccepted(s,response, gr.number)){&#13;
					return true;&#13;
				}&#13;
				&#13;
				&#13;
			}&#13;
			catch(ex) {&#13;
				var message = ex.getMessage();&#13;
				gs.error(this.LOGHEADER , this.LOGSOURCE , functName, this.LOG_ERROR, message);&#13;
				return false;&#13;
			}&#13;
		},&#13;
		&#13;
		&#13;
		&#13;
		/** V E R A C I T Y ~ www.meetveracity.com ~ **&#13;
 		* Author: Todd Fudala ~ tfudala@meetveracity.com&#13;
		&#13;
 		* Description: Validates the ORS SOAP response and logs success and failure&#13;
		&#13;
 		* Parameters:&#13;
 		* soap: the original soap request message&#13;
 		* soapresponse: the soap response message&#13;
 		* number: the ECM case number this is regarding&#13;
		&#13;
 		* Returns: True if the call is successful, False if unsucessful&#13;
 		*/&#13;
		&#13;
		orsPostAccepted : function (soap, soapresponse, number)&#13;
		{&#13;
			var functName = "orsPostAccepted()";&#13;
			ret = false;&#13;
			var msg = '';&#13;
			&#13;
			try{&#13;
				&#13;
				var error_msg = soapresponse.haveError() ? soapresponse.getErrorMessage() : null;&#13;
				var body = soapresponse.getBody();&#13;
				var status = soapresponse.getStatusCode();&#13;
				var doc = new XMLDocument2();&#13;
				doc.parseXML(body); // Load XML&#13;
				var valid_doc = doc.isValid(); // Validate&#13;
				&#13;
				// First test for systemic success, then functional success in the ORS response&#13;
				if(status == this.HTTPSTATUS_SUCCESS &amp;&amp; !soapresponse.haveError()) {&#13;
					if(!gs.nil(doc) &amp;&amp; valid_doc){&#13;
						&#13;
						var fault_error = doc.getNodeText("//faultcode"); // Type of fault&#13;
						var fault_msg = doc.getNodeText("//faultstring"); // Fault description&#13;
						var ors_issue = doc.getNodeText("//issueId"); // This indicates success creating a new ORS Issue&#13;
						&#13;
						if(!gs.nil(fault_error)){&#13;
							throw new Error(fault_error + ":" + fault_msg); //Something in the API went wrong, log error&#13;
						}&#13;
						else if(gs.nil(ors_issue)){&#13;
							throw new Error("An ORS Issue ID was not returned for this call."); //Looks like success but something else went wrong, log error&#13;
						}&#13;
						else {&#13;
							var success_msg = "ORS Issue # " + ors_issue + " successfully created for ECM Case # :" + number; //Successful ORS Issue creation&#13;
							gs.info(this.LOGHEADER , this.LOGSOURCE , functName, this.LOG_INFO, success_msg);&#13;
						}&#13;
					}&#13;
				}&#13;
				else{&#13;
					throw new Error("The SOAP call failed, HTTP response code: &gt;["&#13;
					+ status + "], SNC error code: [" + error_msg + "], SOAP response:\r\n " + body); //Systemic error&#13;
				}&#13;
				&#13;
				&#13;
				&#13;
			}&#13;
			catch(e){&#13;
				gs.error(this.LOGHEADER , this.LOGSOURCE , functName, this.LOG_ERROR, e.message);&#13;
			}&#13;
			return ret;&#13;
		},&#13;
		&#13;
		/** V E R A C I T Y ~ www.meetveracity.com ~ **&#13;
 		* Author: Todd Fudala ~ tfudala@meetveracity.com&#13;
		&#13;
 		* Description: Logs and returns the input for testing purposes&#13;
		&#13;
 		* Parameters:&#13;
 		* input: input message&#13;
		&#13;
 		* Returns: the input message&#13;
 		*/&#13;
		&#13;
		echo : function(input) {&#13;
			var functName = "echo()";&#13;
			gs.info(this.LOGHEADER , this.LOGSOURCE , functName, this.LOG_INFO, input);&#13;
			return input;&#13;
		},&#13;
		&#13;
		/** V E R A C I T Y ~ www.meetveracity.com ~ **&#13;
 		* Author: Todd Fudala ~ tfudala@meetveracity.com&#13;
		&#13;
 		* Description: Chunks a string to an array of fixed bytes&#13;
		&#13;
 		* Parameters:&#13;
 		* str: the string to chuck&#13;
 		* maxPartSize: the max size of the chunk&#13;
		&#13;
 		* Returns: the chunked string in an array&#13;
 		*/&#13;
		chunkStringToArray : function (str, maxPartSize){&#13;
			&#13;
			var chunkArr = [];&#13;
			var leftStr = str;&#13;
			do {&#13;
				&#13;
				chunkArr.push(leftStr.substring(0, maxPartSize));&#13;
				leftStr = leftStr.substring(maxPartSize, leftStr.length);&#13;
				&#13;
			} while (leftStr.length &gt; 0);&#13;
			&#13;
			return chunkArr;&#13;
		},&#13;
		&#13;
		OptumRxMemberSearch : function () {&#13;
			&#13;
		},&#13;
		OptumRxClaimSearch : function () {&#13;
			&#13;
		},&#13;
		&#13;
		/** V E R A C I T Y ~ www.meetveracity.com ~ **&#13;
 		* Author: Todd Fudala ~ tfudala@meetveracity.com&#13;
		&#13;
 		* Description: Calls the OptumRx oAuth Token service&#13;
		&#13;
 		* Returns: the access token to call OptumRx REST service resources&#13;
 		*/&#13;
		&#13;
		getOptumRxToken : function () {&#13;
			var functName = "getOptumRxToken()";&#13;
			&#13;
			try {&#13;
				var r = new sn_ws.RESTMessageV2('x_opt_ecm.OptumRxToken', 'GetToken');&#13;
				&#13;
				var response = r.execute();&#13;
				var responseBody = response.getBody();&#13;
				var httpStatus = response.getStatusCode();&#13;
				&#13;
				gs.info(this.LOGHEADER , this.LOGSOURCE , functName, this.LOG_INFO, responseBody);&#13;
				return JSON.parse(responseBody).access_token;&#13;
			}&#13;
			catch(ex) {&#13;
				var message = ex.getMessage();&#13;
				gs.info(this.LOGHEADER , this.LOGSOURCE , functName, this.LOG_ERROR, message);&#13;
			}&#13;
			&#13;
		},&#13;
		&#13;
		mapContactRelationship : function (contact_relationship) {&#13;
			var functName = "mapContactRelationship()";&#13;
			var map = "";&#13;
			&#13;
// 			switch(contact_relationship) {&#13;
// 				case insured_participant:&#13;
// 				code block&#13;
// 				break;&#13;
// 				case n:&#13;
// 				code block&#13;
// 				break;&#13;
// 				default:&#13;
// 				code block&#13;
// 			}&#13;
			&#13;
			&#13;
			&#13;
		},&#13;
		&#13;
		&#13;
		&#13;
		type: 'ECMIntegrations'&#13;
	};</script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>todd.fudala</sys_created_by>
        <sys_created_on>2017-10-02 18:45:10</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>1e0cdbfd4f250f001e6cb4fe0210c736</sys_id>
        <sys_mod_count>107</sys_mod_count>
        <sys_name>ECMIntegrations</sys_name>
        <sys_package display_value="Escalated Complaint Management" source="x_opt_ecm">d1cfc3484f680b001e6cb4fe0210c7b7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Escalated Complaint Management">d1cfc3484f680b001e6cb4fe0210c7b7</sys_scope>
        <sys_update_name>sys_script_include_1e0cdbfd4f250f001e6cb4fe0210c736</sys_update_name>
        <sys_updated_by>todd.fudala</sys_updated_by>
        <sys_updated_on>2017-10-12 03:39:32</sys_updated_on>
    </sys_script_include>
</record_update>
